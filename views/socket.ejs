<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
</head>
<body>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.7.2/socket.io.js" integrity="sha512-zoJXRvW2gC8Z0Xo3lBbao5+AS3g6YWr5ztKqaicua11xHo+AvE1b0lT9ODgrHTmNUxeCw0Ry4BGRYZfXu70weg==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
  <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
  <P>하이</P>
  <ul id="messages"></ul>
  <form id="chat-form">
    <input id="exRoom" type="text" placeholder="방제">
    <input id="exId" type="text" placeholder="익명의 아이디">
    <input type="text" id="message-input" autocomplete="off" />
    <button>Send</button>
  </form>
  
  
  <button id="in">하하 서버로 입장하기</button>
  <button id="out">하하 서버에서 나가기</button>
  <hr>
  <form id="fromHere">
    <input id="room" type="text" placeholder="전달할 룸">
    <input id="from" type="text" placeholder="익명의 아이디">
    <input type="text" id="message" autocomplete="off" />
    <button>Send</button>
  </form>
  <button id="login">디디 서버 로그인하기</button>
  <hr>
  <div id="messageBox"></div>
  <hr>
  <div id="chattingBox"></div>
  <hr>
  <form id="didiBox"></form>
  <!-- <form id="tellForm">
    <input id="diditext" type="text" placeholder="디디가 할 말">
    <button>Send</button>
  </form> -->

  <script>
    var socket = io();
    socket.on('start', (data) => {
      console.log(data);
      const input = document.getElementById('roomId');
      input.value = data.roomId;
      const message = document.getElementById('messages');
      const li = document.createElement('li');
      li.textContent = data.msg;
      message.appendChild(li);
    });
    
    document.getElementById('in').addEventListener('click', (e) => {
      document.getElementById('exRoom').value = '하하'
      const id = document.getElementById('exId').value;
      const server = '하하';
      const data = {id, server};
      
      socket.emit('getIn', data);
    });
    socket.on('open', (resulte) => {
      console.log(resulte);
      const message = document.getElementById('messages');
      const li = document.createElement('li');
      li.textContent = resulte.msg;
      message.appendChild(li);
    })
    document.getElementById('out').addEventListener('click', (e) => {
      document.getElementById('exRoom').value = ''
      const id = document.getElementById('exId').value;
      const server = '하하';
      const data = {id, server};

      socket.emit('getOut', data);
    });
    socket.on('close', (msg) => {
      console.log(msg);
      const message = document.getElementById('messages');
      const li = document.createElement('li');
      li.textContent = msg;
      message.appendChild(li);
    })

    socket.on('sendMsg', (data) => {
      console.log(data);
      if (!data) {
        return alert('아무 방에도 들어가 있지않습니다');
      }
      const message = document.getElementById('messages');
      const li = document.createElement('li');
      li.textContent = data.id + ': ' + data.msg;
      message.appendChild(li);
    })
    
    document.getElementById('chat-form').addEventListener('submit', (e) => {
      e.preventDefault();
      const room = document.getElementById('exRoom').value;
      const id = document.getElementById('exId').value;
      const input = document.getElementById('message-input');
      const msg = input.value;
      const data = { room, id, msg }
      socket.emit('userSend', data)
      input.value = '';
    })


    document.getElementById('fromHere').addEventListener('submit', (e) => {
      e.preventDefault();
      const room = document.getElementById('room').value;
      const id = document.getElementById('from').value;
      const msg = document.getElementById('message').value;
      const data = { room, id, msg }
      socket.emit('fromHere', data)
      message = '';
    })

    socket.on('messageBox', (data) => {
      console.log(data);
      const box = document.getElementById('messageBox');
      
      if (!document.getElementById(data.from)) {
        const boxItem = document.createElement('div');
        boxItem.textContent = (data.lastChat + data.from);
        boxItem.id = data.from;
        box.appendChild(boxItem);
        const btn = document.createElement('button');
        const type = document.createAttribute('onclick');
        btn.id = `${data.from}_btn`;
        type.value = `toChatroom(${data.from})`;
        btn.setAttributeNode(type);
        btn.textContent = '채팅방';
        box.appendChild(btn);
      } else {
        const updateinner = document.getElementById(data.from);
        updateinner.textContent = (data.lastChat + data.from);
      }
    });
    
    document.getElementById('login').addEventListener('click', async () => {
      const server = '디디';
      const resulte = await axios.get('/getChatHeaderList');
      socket.emit('login', server);
      
      const chatHeader = resulte.data.chatData;
      console.log(chatHeader);

      const box = document.getElementById('messageBox');
      for (let i = 0; i < chatHeader.length; i++) {
        let user = chatHeader[i].user;
        let msg = chatHeader[i].msg;
        const boxItem = document.createElement('div');
        boxItem.textContent = (msg + user);
        boxItem.id = user;
        box.appendChild(boxItem);

        const btn = document.createElement('button');
        const type = document.createAttribute('onclick');
        btn.id = `${user}_btn`;
        type.value = `toChatroom(${user})`;
        btn.setAttributeNode(type);
        btn.textContent = '채팅방';
        box.appendChild(btn);
      }
    });

    const toChatroom = async (from) => {
      console.log(from.id);
      const chatting = await axios.get(`/getChatting?from=${from.id}`);
      console.log(chatting.data.resulte[0]);
      // const list = chatting.data.resulte[0].chatList?.map(chat => boxItem.textContent = (chat.user+chat.msg));
      // box.appendChild(boxItem)
      // chatting.data.resulte[0].chatList?.forEach(item => {
        //   boxItem.textContent = (item.user+item.msg);
        //   box.appendChild(boxItem)
        // })
      let box = document.getElementById('chattingBox');
      
      for (let i = 0; i<chatting.data.resulte[0].chatList.length; i++) {
        let user = chatting.data.resulte[0].chatList[i].user;
        let msg = chatting.data.resulte[0].chatList[i].msg;
        let boxItem = document.createElement('p');
        boxItem.textContent = (user+msg);
        boxItem.id = user;
        box.appendChild(boxItem);
      };
      
      if (from.id !== box.firstChild.id) {
        while (box.firstChild) {
          box.removeChild(box.firstChild)
          if (from.id == box.firstChild.id) {
            return
          }
        } 
      };

      const didiBox = document.getElementById('didiBox');
      const diditext = document.createElement('input');
      diditext.type = 'text';
      diditext.id = 'diditext';
      
      const btn = document.createElement('button');
      const type = document.createAttribute('submit');
      type.value = `fromDidi()`;
      
      btn.textContent = 'send';
      btn.setAttributeNode(type);
      
      didiBox.appendChild(diditext);
      didiBox.appendChild(btn);

    };

    socket.on('inChatroom', (toInChatroom) => {
      let box = document.getElementById('chattingBox');

      if (toInChatroom.from == box.lastChild.id) {
        let boxItem = document.createElement('p');
        boxItem.textContent = (toInChatroom.from+toInChatroom.msg);
        boxItem.id = toInChatroom;
        box.appendChild(boxItem);
      }
    });

    const didiChat = document.getElementById('diditext');
    const fromDidi = () => {
      console.log(didiChat);
    };

    
  </script>
</body>
</html>